<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Álvaro Castellano</title>
  <subtitle>Personal Website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://a-castellano.github.io/"/>
  <updated>2016-09-05T07:01:25.476Z</updated>
  <id>https://a-castellano.github.io/</id>
  
  <author>
    <name>Álvaro Castellano Vela</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My marvelous adventures with Docker - Part I</title>
    <link href="https://a-castellano.github.io/2016/09/05/My-marvelous-adventures-with-Docker-Part-I/"/>
    <id>https://a-castellano.github.io/2016/09/05/My-marvelous-adventures-with-Docker-Part-I/</id>
    <published>2016-09-05T06:59:09.000Z</published>
    <updated>2016-09-05T07:01:25.476Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s play with Docker and learn something about it!</p>
<p>But wait, what the hell is Docker? <a href="https://www.docker.com" target="_blank" rel="external">Docker</a> is an open platform to build, ship and run distributed applications anywhere. So you can run apps which “live” inside a contaniner runned and mannaged by Docker. It is similar to VirtualBox but Docker is lighter cause it’s architectural approach.</p>
<p>It’s very useful when you want to scale your app, the more load, the more containers containing the same app image you’ll deploy very quickly. It could be like Amazon Auto Scaling Group but you won’t deploy full machines.</p>
<p>The containers run images with your apps, in this post I will create 3 images (I will call them Archons). We will store the docker images into our <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub Repo</a>.</p>
<p><strong>Installing Docker</strong></p>
<p>Im going to create an 20$/month Ubuntu Droplet in my <a href="https://www.digitalocean.com" target="_blank" rel="external">Digital Ocean</a> account and I will use <a href="https://www.ansible.com" target="_blank" rel="external">Ansible</a> to install Docker.</p>
<div class="alert info"><p>I’m not going to explain what Ansible is and how to use it. In this post and the following ones I may use my own Ansible repo. I’ve promised to myself that I will write a wiki for that project ASAP.</p>
</div>
<p>So, let’s clone my <a href="https://www.digitalocean.com" target="_blank" rel="external">Sysadmin Scripts</a> repo and I will use my Docker Role to install all the necesary packages in my droplet.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/a-castellano/Sysadmin-Scripts.git</div><div class="line"><span class="built_in">cd</span> Sysadmin-Scripts/Ansible/</div></pre></td></tr></table></figure></p>
<p>Place your droplet IP into <em>inventory/my.hosts</em>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Docker]</div><div class="line">YOUR_DROPLET_IP</div></pre></td></tr></table></figure></p>
<p>If your is Ubuntu bersion is 16.04 you’ll have to install python.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@YOUR_DROPLET_IP apt-get install -y python</div></pre></td></tr></table></figure></p>
<p>Launch the playbook and reboot your droplet after the deployment.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook playbooks/setup_docker/setup.yml</div></pre></td></tr></table></figure></p>
<p><strong>Deploying dockers</strong></p>
<p>We will start creating our first Archon which will contain an Apache web server. We will create a container from the <a href="https://hub.docker.com/_/debian" target="_blank" rel="external">official Debian Docker image</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker create  --name ArchonWeb --hostname ArchonWeb -i debian</div><div class="line">Unable to find image <span class="string">'debian:latest'</span> locally</div><div class="line">latest: Pulling from library/debian</div><div class="line"></div><div class="line">8ad8b3f87b37: Pull complete</div><div class="line">Digest: sha256:2340a704d1f8f9ecb51c24d9cbce9f5ecd301b6b8ea1ca5eaba9edee46a2436d</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> debian:latest</div><div class="line">584c54e123ec442b9c17a1645a9057406c67d8c80f72903a377f904ce9ae7269</div></pre></td></tr></table></figure>
<p>Docker checks if there exists an image called “debian” in <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub</a>. If Docker doesn’t have the latest version it will donwload it. When Docker gets the image it will create the container with debian inside.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">584c54e123ec        debian              <span class="string">"/bin/bash"</span>         2 minutes ago       Created                                 ArchonWeb</div></pre></td></tr></table></figure>
<p>Start the docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">584c54e123ec        debian              <span class="string">"/bin/bash"</span>         10 minutes ago      Up 6 seconds                            ArchonWeb</div></pre></td></tr></table></figure>
<p>Ok, our first docker is alive, let’s enter into it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -i -t ArchonWeb  /bin/bash</div></pre></td></tr></table></figure>
<p>Hell Yeah! We are inside our first Docker container running!</p>
<p>As ArchonWeb will be a web server we are going to install Apache2.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install apache2 apache2-utils php5 php5-mcrypt php5-mysql php5-cli php5-common php5-json php5-readline php-pear libmcrypt4 libapache2-mod-php5 libmcrypt-dev mcrypt mariadb-client net-tools -y</div><div class="line">service apache2 start</div></pre></td></tr></table></figure>
<p>Apache2 is running!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netstat -punta | grep LISTEN</div><div class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3488/apache2</div></pre></td></tr></table></figure>
<p>Wait, Apache2 is listening on a private address so we can’t connect to this server. Don’t start to cry yet, we can solve this issue.</p>
<p>We are making changes in our machine thereforce our first step will be create a new image from “debian” one.</p>
<p>Let’s exit from our docker.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>Stop the Docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop ArchonWeb</div></pre></td></tr></table></figure>
<p>Commit a new image called ArchonWeb from the original debian one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Creating my first image"</span> ArchonWeb</div></pre></td></tr></table></figure>
<p>Now, we have two images in our machine.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">&lt;none&gt;              &lt;none&gt;              YOUR_IMAGE_ID       57 seconds ago      262.4 MB</div><div class="line">debian              latest              031143c1c662        3 days ago          125.1 MB</div></pre></td></tr></table></figure>
<p>Ok, this is not beauty and it would be better to have our new image in a repository. Create and account in <a href="https://hub.docker.com" target="_blank" rel="external">Docker Repo</a> and create a new repo too.</p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/creating_repo.png" title="Creating the repo" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/creating_repo.png" alt="Creating the repo"></a><span class="caption">Creating the repo</span></div><div style="clear:both;"></div>
<p>Log to your Docker Hub account.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker login</div><div class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">'t have a Docker ID, head over to https://hub.docker.com to create one.</span></div><div class="line">Username: YOUR_USERNAME</div><div class="line">Password: YOUR_PASSWORD</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Creating my first image"</span> ArchonWeb YOUR_USERNAME/archonweb</div></pre></td></tr></table></figure>
<p>To probe that all is ok let’s delete our container and all the images</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@Docker:~|⇒  docker rm ArchonWeb</div><div class="line">ArchonWeb</div><div class="line">root@Docker:~|⇒  docker images</div><div class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">YOUR_USERNAME/archonweb   latest              c739c75c3b8e        33 minutes ago      262.4 MB</div><div class="line">&lt;none&gt;                  &lt;none&gt;              ad6d1440ebde        40 minutes ago      262.4 MB</div><div class="line">debian                  latest              031143c1c662        3 days ago          125.1 MB</div><div class="line">root@Docker:~|⇒  docker rmi c739c75c3b8e ad6d1440ebde 031143c1c662</div><div class="line">Untagged: YOUR_USERNAME/archonweb:latest</div><div class="line">Untagged: YOUR_USERNAME/archonweb@sha256:8e1e908fe823ef1b746718ebb7564548f4f0ea076faaae733f667fb5946acee7</div><div class="line">Deleted: sha256:c739c75c3b8e690427a845ae79206b1e3037fddf604765dc5e0478536161e5bb</div><div class="line">Deleted: sha256:ad6d1440ebde55617462269619<span class="built_in">cd</span>457bfa825d8f307c126d7fbc0ca3201c493f</div><div class="line">Deleted: sha256:a6a314f5c1a5da3d06226fe40216731384d3f80fafade48a2b1cef3f07384b96</div><div class="line">Untagged: debian:latest</div><div class="line">Untagged: debian@sha256:2340a704d1f8f9ecb51c24d9cbce9f5ecd301b6b8ea1ca5eaba9edee46a2436d</div><div class="line">Deleted: sha256:031143c1c662878cf5be0099ff759dd219f907a22113eb60241251d29344bb96</div><div class="line">Deleted: sha256:9e63c5bce4585dd7038d830a1f1f4e44cb1a1515b00e620ac718e934b484c938</div></pre></td></tr></table></figure>
<p>Now we are going to create a new container with our own image and we will redirect the host port 8080 to our docker 80 port.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create  --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb</div><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure>
<p>Start the container, enter into it and start the Apache2 web server. Now go to your docker host with port 8080 and you’ll see the Apache default page.</p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/apache2_default_page.png" title="Apache 2 Default Server" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/apache2_default_page.png" alt="Apache 2 Default Server"></a><span class="caption">Apache 2 Default Server</span></div><div style="clear:both;"></div>
<p>You can configue the container to launch apache2 when you start the container.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i acastellano/archonweb /usr/sbin/apache2ctl -D FOREGROUND</div><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure>
<p>It works! Wait….. what happends if we put private webpages in our container, our conted will be public if we commit our images. Where the hell are my database for my web apps?</p>
<p>Keep calm, in the next adventure I will talk about volumes and Docker Composer (for automatize your dockers deployment.)</p>
<p>See you in the next post.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s play with Docker and learn something about it!&lt;/p&gt;
&lt;p&gt;But wait, what the hell is Docker? &lt;a href=&quot;https://www.docker.com&quot; target=&quot;_
    
    </summary>
    
      <category term="global" scheme="https://a-castellano.github.io/categories/global/"/>
    
    
      <category term="docker" scheme="https://a-castellano.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>This is Major Tom to ground control</title>
    <link href="https://a-castellano.github.io/2016/08/23/This-is-Major-Tom-to-ground-control/"/>
    <id>https://a-castellano.github.io/2016/08/23/This-is-Major-Tom-to-ground-control/</id>
    <published>2016-08-23T21:57:34.000Z</published>
    <updated>2016-09-05T06:47:27.313Z</updated>
    
    <content type="html"><![CDATA[<p>Engines Ready! It is Time to liftoff!</p>
<p>Welcome to my blog. Here I will try to post interesting pieces of my own work such as sysadmin scripts, useful dev tools with examples, etc. I hope you will enjoy the lecture of my website while you learn new concepts.</p>
<p>First of all. How is this blog made?</p>
<p>I’m using <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> as blogging platfform. I found it few days ago and it seems really useful and easy to use. Following the <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> this blog was set in few minutes.</p>
<p>The feature I like the most is that you can mantain the blog in your local system (in my case I’m using an Ubuntu 16.04 VM) for writting posts. When the post is ready to be published you only have to “build” the blog and “deploy” it to your site repo. Hexo will generate a static website in the previously choosen repository (it’s all in the <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a>).</p>
<p>So, when I’ve finished this post, from my VM, I check that the post is OK rendering the blog in my brwoser.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>I can see the local version of my blog in <a href="http://MY_SERVER_IP:4000" target="_blank" rel="external">http://MY_SERVER_IP:4000</a> (by default it uses that port)</p>
<p>If everithing looks fine to me it’s time to build the static content and deploy it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>
<p>And that’s all! The new post it’s been published in my blog!</p>
<p>The Hexo blog is stored in my <a href="https://github.com/a-castellano/hexo_blog" target="_blank" rel="external">GitHub acccount</a> and the static webpage that you are watching is <a href="https://github.com/a-castellano/a-castellano.github.io" target="_blank" rel="external">there</a> too.</p>
<p>I’m not explaining how to set up an hexo blog, the <a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo documentation</a> is all you need for doing it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Engines Ready! It is Time to liftoff!&lt;/p&gt;
&lt;p&gt;Welcome to my blog. Here I will try to post interesting pieces of my own work such as sysadm
    
    </summary>
    
      <category term="global" scheme="https://a-castellano.github.io/categories/global/"/>
    
    
      <category term="hexo" scheme="https://a-castellano.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
