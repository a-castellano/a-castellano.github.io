<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Álvaro Castellano</title>
  <subtitle>Personal Website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://a-castellano.github.io/"/>
  <updated>2016-09-18T19:13:43.231Z</updated>
  <id>https://a-castellano.github.io/</id>
  
  <author>
    <name>Álvaro Castellano Vela</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My marvelous adventures with Docker - Part II</title>
    <link href="https://a-castellano.github.io/2016/09/18/My-marvelous-adventures-with-Docker-Part-II/"/>
    <id>https://a-castellano.github.io/2016/09/18/My-marvelous-adventures-with-Docker-Part-II/</id>
    <published>2016-09-18T15:35:51.000Z</published>
    <updated>2016-09-18T19:13:43.231Z</updated>
    
    <content type="html"><![CDATA[<p><strong>In this post I continue my adventures with Docker. After creating our first image and container in the previous <a href="https://a-castellano.github.io/2016/09/05/My-marvelous-adventures-with-Docker-Part-I/">post</a> I will look into how docker images can autostart services and how to establish comunication between containers.</strong></p>
<div class="alert info"><p>During this post we are creating images and storing them in Docker Hub. All my images are stored in my <a href="https://hub.docker.com/r/acastellano/archonweb/" target="_blank" rel="external">ArchonWeb</a> repository. All the scripts used in this post an be found in my <a href="https://github.com/a-castellano/docker" target="_blank" rel="external">Docker repo</a>.</p>
</div>
<p>First of all we should remove all containers and images to mantian our workspace clean.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rmi $(docker images -q)</div></pre></td></tr></table></figure>
<p>Let’s create again our container.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb /usr/sbin/apache2ctl -D FOREGROUND</div></pre></td></tr></table></figure>
<p>This comand looks nice but… What all these arguments mean?</p>
<p><strong>–name:</strong> The name of the container<br><strong>–hostname:</strong> The hostname<br><strong>-p:</strong> the port forwarding definition, write as many as you need<br><strong>-i:</strong> the desired image to deploy</p>
<p>After all these arguments we have to specify which comand (with its own arguments) will be executed by our container on start.</p>
<p><strong>/usr/sbin/apache2ctl -D FOREGROUND</strong></p>
<p>If we look our cointainer propeties we’ll see:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">5f3286af690b        YOUR_USERNAME/archonweb    <span class="string">"/usr/sbin/apache2ctl"</span>   12 minutes ago      Created                                 ArchonWeb</div></pre></td></tr></table></figure></p>
<p>What happends if we don’t specify the apache comand?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop ArchonWeb &amp;&amp; docker rm ArchonWeb</div><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb</div></pre></td></tr></table></figure></p>
<p>Let’s see:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">2250cc8640ae        YOUR_USERNAME/archonweb <span class="string">"/bin/bash"</span>         2 minutes ago       Created                                 ArchonWeb</div></pre></td></tr></table></figure></p>
<p>By default our container will execute bash process. As we don’t specify any argument or command, apache2 won’t be called<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker start ArchonWeb</div><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS                  NAMES</div><div class="line">2250cc8640ae        YOUR_USERNAME/archonweb <span class="string">"/bin/bash"</span>         17 seconds ago      Up 9 seconds        0.0.0.0:8080-&gt;80/tcp   ArchonWeb</div></pre></td></tr></table></figure></p>
<p>We won’t see nothing in <a href="http://SERVER_IP:8080" target="_blank" rel="external">http://SERVER_IP:8080</a>.</p>
<p>But what if we want our container to run apache2 by default?</p>
<p>We need to update our image configuration, to do that we will create a new container with our desired settings. After doing this we will create a new image.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb /usr/sbin/apache2ctl -D FOREGROUND</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-l</span></div><div class="line">CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS               NAMES</div><div class="line">ea13cfe69acf        YOUR_USERNAME/archonweb <span class="string">"/usr/sbin/apache2ctl"</span>   50 seconds ago      Created                                 ArchonWeb</div></pre></td></tr></table></figure>
<p>There are no ports listed because the container is not in execution.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Added COMMAND"</span> <span class="_">-a</span> <span class="string">"YOUR NAME"</span> ArchonWeb YOUR_USERNAME/archonweb:v2</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">YOUR_USERNAME/archonweb  v2                  a8870e0efa0a        44 seconds ago      262.4 MB</div><div class="line">YOUR_USERNAME/archonweb  latest              c739c75c3b8e        2 days ago          262.4 MB</div></pre></td></tr></table></figure>
<p>If you are not signed in our <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub</a> account the following step will fail.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push YOUR_USERNAME/archonweb:v2</div></pre></td></tr></table></figure></p>
<p>In our <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub</a> account we could see the two tags.</p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/docker_image_tags01.png" title="My two tags" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/docker_image_tags01.png" alt="My two tags"></a><span class="caption">My two tags</span></div><div style="clear:both;"></div>
<p>Ok, let’s test if all would work as we wish. We will delete all the containers and images and we will deploy aour archonweb:v2 in a new container.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rmi $(docker images -q)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb:v2 &amp;&amp; docker ps <span class="_">-a</span></div><div class="line">...</div><div class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED                  STATUS              PORTS               NAMES</div><div class="line">381681d2078c        YOUR_USERNAME/archonweb:v2  <span class="string">"/usr/sbin/apache2ctl"</span>   Less than a second ago   Created                                 ArchonWeb</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">docker inspect ArchonWeb</div><div class="line">[</div><div class="line">&#123;</div><div class="line">                <span class="string">"Id"</span>: <span class="string">"381681d2078c773ed9ca18db41ae006baa1e15c969cc7769f590f74105d8ff73"</span>,</div><div class="line">                        <span class="string">"Created"</span>: <span class="string">"2016-09-05T19:47:41.793743389Z"</span>,</div><div class="line">                                <span class="string">"Path"</span>: <span class="string">"/usr/sbin/apache2ctl"</span>,</div><div class="line">                                <span class="string">"Args"</span>: [</div><div class="line">                                            <span class="string">"-D"</span>,</div><div class="line">                                                        <span class="string">"FOREGROUND"</span></div><div class="line">                                                                </div><div class="line">                                ],</div><div class="line"></div><div class="line">&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>After starting our docker container we would see our apache default page throught port 8080 in our docker host.</p>
<p><strong>Using Dockerfile to create images</strong></p>
<p>In this section we are going to use <strong>Dockerfile</strong>. A Dockerfile is a special file which tells docker how to build images. We are going to create again our Archonweb:v2 image using a Dockerfile.</p>
<p>Clone my <a href="https://github.com/a-castellano/docker" target="_blank" rel="external">docker repo</a> in our /root/ folder.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/a-castellano/docker.git</div><div class="line"><span class="built_in">cd</span> docker/ArchonWeb</div><div class="line">tree</div><div class="line">.</div><div class="line">├── apache2_sites_enabled</div><div class="line">│   ├── 000-default.conf</div><div class="line">│   └── docker.my-site.io.conf</div><div class="line">├── apache2_www</div><div class="line">│   ├── docker.my-site.io</div><div class="line">│   │   └── index.html</div><div class="line">│   └── html</div><div class="line">│       └── default</div><div class="line">│           └── index.html</div><div class="line">├── Dockerfile</div><div class="line">└── README.md</div></pre></td></tr></table></figure>
<p>There are more files side from the DockerFile, we will use the other later. </p>
<p>This is our Dockerfile.</p>
<script src="https://gist.github.com/a-castellano/e3c9f238e784473644b89da6b7f43dc0.js"></script>

<p>This Docker file will create a new image <strong>FROM</strong> our archonweb:latest current image, it will update our packages (using <strong>RUN</strong> Docker will execute commands inside our image). The Dockerfile defines the open ports that will be open too. Finally, tt sets the image command for starting apache2 when the container starts.</p>
<p>Build the image form using dockerfile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker build -t YOUR_USERNAME/archonweb:v2 .</div><div class="line">docker images</div><div class="line">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">YOUR_USERNAME/archonweb  v2                  6c732b5bae3d        45 seconds ago      276.4 MB</div><div class="line">acastellano/archonweb    latest              c739c75c3b8e        12 days ago         262.4 MB</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb:v2</div></pre></td></tr></table></figure>
<p>If we start our new ArchonWeb contaiter it will work in the same way as before.</p>
<p>As we did before we can commit the image:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Image created using a Dockerfile"</span> <span class="_">-a</span> <span class="string">"YOUR NAME"</span> ArchonWeb YOUR_USERNAME/archonweb:v2</div></pre></td></tr></table></figure>
<p><strong>Using volumes</strong></p>
<p>So, we have a webserver without content. Next step would be create a website or webapp but there are a litle problem. If we enter inside our container and we try to update our index.html we will realize that this contaner doesn’t have any text editor!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -i -t ArchonWeb /bin/bash</div><div class="line">vi /var/www/html/index.html</div><div class="line">bash: vi: <span class="built_in">command</span> not found</div><div class="line"></div><div class="line">nano /var/www/html/index.html</div><div class="line">bash: nano: <span class="built_in">command</span> not found</div></pre></td></tr></table></figure></p>
<p>Why we don’t have any editor? Don’t lose your mind!</p>
<p>Docker images should be as small as possible so it would be reasonable to have only essential packages installed. So please, don’t install text editors or other tools that are not necessary for the main purpose of the image.</p>
<p>We are going to use volumes. A volume is a local directory wich is mounted in our container, so we can edit files that the container can see. When we mount a volume in existing location it will be overwritten.</p>
<p>Inside our repository there are two folders: <strong>apache2_sites_enabled</strong> will be mounted in <strong>/etc/apache2/sites-enabled</strong> and <strong>apache2_www</strong> will be mounted in <strong>/var/www</strong>.</p>
<p>For doing this we will use the <strong>-v</strong> option which allows us to attach volumes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWebVolumes --hostname ArchonWebVolumes -p 8081:80 -v apache2_www:/var/www -v apache2_sites_enabled:/etc/apache2/sites-enabled -i YOUR_USERNAME/archonweb:v2</div></pre></td></tr></table></figure></p>
<p>This might not work, ensure that we are in the folder ArchonWeb which is inside of the docker root folder.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="variable">$PWD</span></div><div class="line">/root/docker/ArchonWeb</div></pre></td></tr></table></figure></p>
<p>We have to use absolute paths.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWebVolumes --hostname ArchonWebVolumes -p 8081:80 -v <span class="variable">$PWD</span>/apache2_www:/var/www -v <span class="variable">$PWD</span>/apache2_sites_enabled:/etc/apache2/sites-enabled -i YOUR_USERNAME/archonweb:v2</div><div class="line">docker start ArchonWebVolumes</div></pre></td></tr></table></figure></p>
<p>Now it is working, our default site has changed. If we could see “Nothing for now” in <a href="http://SERVER_IP:8081" target="_blank" rel="external">http://SERVER_IP:8081</a> congratulations! We did it!<br>In the same way, if we point docker.my-site.io to our SERVER_IP we could see a defualt web template in <a href="http://docker.my-site.io:8081" target="_blank" rel="external">http://docker.my-site.io:8081</a></p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv2_default_website.png" title="Our new default wbsite" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv2_default_website.png" alt="Our new default wbsite"></a><span class="caption">Our new default wbsite</span></div><div style="clear:both;"></div>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/docker-my-site-io.png" title="Our docker website" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/docker-my-site-io.png" alt="Our docker website"></a><span class="caption">Our docker website</span></div><div style="clear:both;"></div>
<p>Of couse, as we modify our defualt index it will change without doing anything more.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim <span class="variable">$PWD</span>/apache2_www/html/default/index.html</div></pre></td></tr></table></figure>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/something-for-now.png" title="Making changes" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/something-for-now.png" alt="Making changes"></a><span class="caption">Making changes</span></div><div style="clear:both;"></div>
<p><strong>Using Dockerfile for attaching volumes</strong></p>
<p>Using a Dockerfile we can go further and write instructions to attach volumes. Inside the the docker repostory there is another folder called ArchonWebVolumes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/docker/ArchonWebVolumes</div></pre></td></tr></table></figure></p>
<p>Here is our DockerFile</p>
<script src="https://gist.github.com/a-castellano/499ea976561d9e646b9ef5e149033de7.js"></script>

<p>In this file there are two new commands: using <strong>VOLUME</strong> we are defining wich path will be a volume. Using <strong>ADD</strong> we define volume relationships as we did using <strong>-v</strong> command. Let’s build the new image.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t archonwebvolumes .</div></pre></td></tr></table></figure></p>
<p>Now we create a new container using the new image:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create  --name ArchonWebVolumes --hostname ArchonWebVolumes -p 8082:80 -i archonwebvolumes</div><div class="line">docker start ArchonWebVolumes</div></pre></td></tr></table></figure></p>
<p>We will see “Nothing for now” in <a href="http://SERVER_IP:8082" target="_blank" rel="external">http://SERVER_IP:8082</a>. As we did before we can modify the files inside the volumes.</p>
<p>Now imagine that inside <em>apache2_www</em> we have some ultra marvelous app, after finishing its development we want to create a new docker image containing our release version wich is inside.</p>
<p>Let’s create another image with the release version of our app inside.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="built_in">cd</span> ~/docker/ArchonWeb</div><div class="line">docker build -t YOUR_USERNAME/archonweb:release .</div><div class="line">docker create  --name ArchonWebRelease --hostname ArchonWebRelease -p 8080:80 -i YOUR_USERNAME/archonweb:release</div></pre></td></tr></table></figure>
<p>The container is ready, now it’s time to copy our release version. For coping files inside our container we need to use <strong>docker cp</strong>. It is not necessary to start the container for copying files inside it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker cp ../ArchonWebVolumes/sites-enabled ArchonWebRelease:/etc/apache2/</div><div class="line">docker cp ../ArchonWebVolumes/www ArchonWebRelease:/var/</div><div class="line">docker start ArchonWebRelease</div></pre></td></tr></table></figure>
<p>If we could see “Nothing for now” in <a href="http://SERVER_IP:8080" target="_blank" rel="external">http://SERVER_IP:8080</a> we did it. Let’s commit our image.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker commit -m &quot;Release&quot; -a &quot;YOUR_NAME&quot; ArchonWebRelease  YOUR_USERNAME/archonweb:release</div><div class="line">docker push YOUR_USERNAME/archonweb:release</div></pre></td></tr></table></figure>
<p><strong>Docker compose</strong></p>
<p>In the last part of this post we are going to create two containers. First container will be a new version of our ArchonWeb contanier. Second container will be a database server, we will use MariaDB. Instead of creating our own docker image we will use a the public MariaDB public image.</p>
<p>Our new ArchonWeb app needs to connect to a database so we need to establish a conecction between our two containers. We could create the containers and use docker for configuring a new network and connect our containers to it but there is another way to do it.</p>
<p>It is posible to automatize this process using <a href="https://docs.docker.com/compose/#/docker-compose" target="_blank" rel="external">Docker Compose</a>.</p>
<p>According with Docker docs, Compose is a tool for defining and running multi-container Docker applications. We will use Compose for creating our new service.</p>
<p>Our first step will be setting up our new version of ArchonWeb.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/docker/Composer_Archonweb_Mariadb</div><div class="line">tree .</div><div class="line">.</div><div class="line">├── archonweb</div><div class="line">│   ├── apache2_sites_enabled</div><div class="line">│   │   └── 000-default.conf</div><div class="line">│   ├── apache2_www</div><div class="line">│   │   └── default</div><div class="line">│   │       └── index.php</div><div class="line">│   └── docker-entrypoint.sh</div><div class="line">├── DockerCloudStackfile.yml</div><div class="line">├── docker-compose.yml</div><div class="line">└── Dockerfile</div><div class="line"></div><div class="line">4 directories, 6 files</div></pre></td></tr></table></figure>
<p>This is our web app:</p>
<script src="https://gist.github.com/a-castellano/7ed05419d7caadbbd0c66679868bb81b.js"></script>

<p>This app only counts how many tables are in our “##MYSQL_DATABASE##”. The database values use ##’s strings beacuse our container will set these values on start. How it will do it?</p>
<p>Our new ArchonWeb will execute this script on start, let’s see what it does:</p>
<script src="https://gist.github.com/a-castellano/70e028e3d1647d30f91a808f70353800.js"></script>

<p>When the container starts, this script checks if the required enviorment variables are set, after that it will modify the index.php and it will run apache2 web server.</p>
<p>All these files need to be copied inside our container, we will do it arfer creating our ArchonWeb image.</p>
<p>For this new version our Dockerfile is very simple.</p>
<script src="https://gist.github.com/a-castellano/a1c9db64e622ebd0046957d729ff5e7e.js"></script>

<p>Let’s create the image and the container.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="built_in">cd</span> ~/docker/Composer_Archonweb_Mariadb</div><div class="line">docker build -t YOUR_USERNAME/archonweb:v3 .</div><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb:v3</div></pre></td></tr></table></figure></p>
<p>Now, let’s copy the web app and the startup script.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/docker/Composer_Archonweb_Mariadb/archonweb</div><div class="line">docker cp apache2_sites_enabled/000-default.conf ArchonWeb:/etc/apache2/sites-enabled/</div><div class="line">docker cp apache2_www/default ArchonWeb:/var/www/</div><div class="line">docker cp docker-entrypoint.sh ArchonWeb:/</div><div class="line">docker commit -m <span class="string">"Added index.php and docker-entrypoint.sh"</span> <span class="_">-a</span> <span class="string">"Your Name"</span> ArchonWeb  YOUR_USERNAME/archonweb:v3</div><div class="line">docker push YOUR_USERNAME/archonweb:v3</div></pre></td></tr></table></figure></p>
<p>If we start our container it won’t work because there are no dabatabases and our app is not configured.<br><div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_index_not_configured.png" title="Our app is not configured" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_index_not_configured.png" alt="Our app is not configured"></a><span class="caption">Our app is not configured</span></div><div style="clear:both;"></div></p>
<p>The required ArchonWeb version is ready. Now is time to deploy our new aplication. This is our Docker Compose sript:</p>
<script src="https://gist.github.com/a-castellano/f6874d398497c156348580235a202f1c.js"></script>

<p>This script defines two services: <strong>db</strong> and <strong>ArchobWeb</strong>. Each service needs a image to be deployed. Also, <strong>db</strong> container mounts a volume where our database will be stored, it won’t be secure if our database is stored publically. If we commit our db image it won’t contain private data.</p>
<p>For each service the script defines <strong>enviorment</strong> variables which will be used to configure the containers.</p>
<p>The <strong>command</strong> defines which script will be executed on start.</p>
<p>In the <strong>ArchonWeb</strong> section is defined a dependency with the <strong>db</strong> container, it won’t be created until <strong>db</strong> exists. Both container will be in the same network, with the “<strong>link</strong>“ action we can reach <strong>db</strong> from ArchonWeb, it is not necesaary to use <strong>db</strong> IP address, we can reach it only using “db” name.</p>
<p>Let’s clean all the containers and images again and launch our docker service.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div><div class="line">docker rmi $(docker images -q)</div><div class="line"><span class="built_in">cd</span> ~/docker/Composer_Archonweb_Mariadb</div><div class="line">docker-compose up <span class="_">-d</span></div><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                  PORTS                  NAMES</div><div class="line">235efc8c9083        acastellano/archonweb:v3   <span class="string">"/docker-entrypoint.s"</span>   1 seconds ago       Up Less than a second   0.0.0.0:8080-&gt;80/tcp   ArchonWeb</div><div class="line">fbb272c61a73        mariadb:latest             <span class="string">"docker-entrypoint.sh"</span>   1 seconds ago       Up Less than a second   3306/tcp               db</div></pre></td></tr></table></figure></p>
<p>If our app works we could see something like this in <a href="http://SERVER_IP:8080" target="_blank" rel="external">http://SERVER_IP:8080</a>.<br><div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_working.png" title="Our app is working!" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_working.png" alt="Our app is working!"></a><span class="caption">Our app is working!</span></div><div style="clear:both;"></div></p>
<p>Let’s explore our container.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -i -t ArchonWeb /bin/bash</div><div class="line">cat /var/www/default/index.php</div></pre></td></tr></table></figure></p>
<p>Our app file has changed according with the envioment variables.</p>
<script src="https://gist.github.com/a-castellano/50c9a0aaea6f11f206a276a8c99391ed.js"></script>

<p>Let’s test if our app is working creating some tables.</p>
<p>Inside Archonweb:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uarchon -ppassword -hdb archondb</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [archondb]&gt; CREATE TABLE example ( id INT, data VARCHAR(100) );</div><div class="line">MariaDB [archondb]&gt; CREATE TABLE example ( id INT, data VARCHAR(100) );</div></pre></td></tr></table></figure>
<p>Ater creating two tables we will see this in <a href="http://SERVER_IP:8080" target="_blank" rel="external">http://SERVER_IP:8080</a>:<br><div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_two_tables.png" title="Two tables" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/archonwebv3_two_tables.png" alt="Two tables"></a><span class="caption">Two tables</span></div><div style="clear:both;"></div></p>
<p>This is it so far folks!</p>
<p>I’m learning new things about Docker and I will write about it soon. Stay tunned.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;In this post I continue my adventures with Docker. After creating our first image and container in the previous &lt;a href=&quot;https://
    
    </summary>
    
      <category term="global" scheme="https://a-castellano.github.io/categories/global/"/>
    
    
      <category term="docker" scheme="https://a-castellano.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>My marvelous adventures with Docker - Part I</title>
    <link href="https://a-castellano.github.io/2016/09/05/My-marvelous-adventures-with-Docker-Part-I/"/>
    <id>https://a-castellano.github.io/2016/09/05/My-marvelous-adventures-with-Docker-Part-I/</id>
    <published>2016-09-05T06:59:09.000Z</published>
    <updated>2016-09-16T08:26:01.835Z</updated>
    
    <content type="html"><![CDATA[<p><strong>In this post I talk about how to get started in Docker. First we will set a Docker server, afterwards we will create your first Docker image and we will run it.</strong> </p>
<p>Let’s play with Docker and learn something about it!</p>
<p>But wait, what is Docker? <a href="https://www.docker.com" target="_blank" rel="external">Docker</a> is an open platform to build, ship and run distributed applications anywhere. So you can run apps which “live” inside a contaniner runned and mannaged by Docker.</p>
<p>It is very useful when you want to scale your app, the more load, the more containers containing the same app image you will deploy very quickly. It could be like Amazon Auto Scaling Group but you will not deploy full machines.</p>
<p>The containers run images with your apps, in this post I will create 3 images (I will call them Archons). We will store the docker images into our <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub Repo</a>.</p>
<p><strong>Installing Docker</strong></p>
<p>Im going to create an 20$/month Ubuntu Droplet in my <a href="https://www.digitalocean.com" target="_blank" rel="external">Digital Ocean</a> account and I will use <a href="https://www.ansible.com" target="_blank" rel="external">Ansible</a> to install Docker.</p>
<div class="alert info"><p>I am still working on improving the wiki of my own repo for Ansible. I will use it in the following post of this series once I have it ready.</p>
</div>
<p>So, let’s clone my <a href="https://github.com/a-castellano/Sysadmin-Scripts.git" target="_blank" rel="external">Sysadmin Scripts</a> repo and I will use my Docker Role to install all the necesary packages in my droplet.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/a-castellano/Sysadmin-Scripts.git</div><div class="line"><span class="built_in">cd</span> Sysadmin-Scripts/Ansible/</div></pre></td></tr></table></figure></p>
<p>Place your droplet IP into <em>inventory/my.hosts</em>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Docker]</div><div class="line">YOUR_DROPLET_IP</div></pre></td></tr></table></figure></p>
<p>If your is Ubuntu bersion is 16.04 you’ll have to install python.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@YOUR_DROPLET_IP apt-get install -y python</div></pre></td></tr></table></figure></p>
<p>Launch the playbook and reboot your droplet after the deployment.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook playbooks/setup_docker/setup.yml</div></pre></td></tr></table></figure></p>
<p><strong>Deploying dockers</strong></p>
<p>We will start creating our first Archon which will contain an Apache web server. We will create a container from the <a href="https://hub.docker.com/_/debian" target="_blank" rel="external">official Debian Docker image</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker create  --name ArchonWeb --hostname ArchonWeb -i debian</div><div class="line">Unable to find image <span class="string">'debian:latest'</span> locally</div><div class="line">latest: Pulling from library/debian</div><div class="line"></div><div class="line">8ad8b3f87b37: Pull complete</div><div class="line">Digest: sha256:2340a704d1f8f9ecb51c24d9cbce9f5ecd301b6b8ea1ca5eaba9edee46a2436d</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> debian:latest</div><div class="line">584c54e123ec442b9c17a1645a9057406c67d8c80f72903a377f904ce9ae7269</div></pre></td></tr></table></figure>
<p>Docker checks if there exists an image called “debian” in <a href="https://hub.docker.com" target="_blank" rel="external">Docker Hub</a>. If Docker doesn’t have the latest version it will donwload it. When Docker gets the image it will create the container with debian inside.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">584c54e123ec        debian              <span class="string">"/bin/bash"</span>         2 minutes ago       Created                                 ArchonWeb</div></pre></td></tr></table></figure>
<p>Start the docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">584c54e123ec        debian              <span class="string">"/bin/bash"</span>         10 minutes ago      Up 6 seconds                            ArchonWeb</div></pre></td></tr></table></figure>
<p>Ok, our first docker is alive, let’s enter into it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -i -t ArchonWeb  /bin/bash</div></pre></td></tr></table></figure>
<p>Congratulations! We are inside our first Docker container running!</p>
<p>As ArchonWeb will be a web server we are going to install Apache2.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install apache2 apache2-utils php5 php5-mcrypt php5-mysql php5-cli php5-common php5-json php5-readline php-pear libmcrypt4 libapache2-mod-php5 libmcrypt-dev mcrypt mariadb-client net-tools -y</div><div class="line">service apache2 start</div></pre></td></tr></table></figure>
<p>Apache2 is running!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netstat -punta | grep LISTEN</div><div class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3488/apache2</div></pre></td></tr></table></figure>
<p>Wait, Apache2 is listening on a private address so we can’t connect to this server. Don’t start to cry yet, we can solve this issue.</p>
<p>We are making changes in our machine thereforce our first step will be create a new image from “debian” one.</p>
<p>Let’s exit from our docker.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
<p>Stop the Docker</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop ArchonWeb</div></pre></td></tr></table></figure>
<p>Commit a new image called ArchonWeb from the original debian one.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Creating my first image"</span> ArchonWeb</div></pre></td></tr></table></figure>
<p>Now, we have two images in our machine.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">&lt;none&gt;              &lt;none&gt;              YOUR_IMAGE_ID       57 seconds ago      262.4 MB</div><div class="line">debian              latest              031143c1c662        3 days ago          125.1 MB</div></pre></td></tr></table></figure>
<p>Ok, this is not beauty and it would be better to have our new image in a repository. Create and account in <a href="https://hub.docker.com" target="_blank" rel="external">Docker Repo</a> and create a new repo too.</p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/creating_repo.png" title="Creating the repo" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/creating_repo.png" alt="Creating the repo"></a><span class="caption">Creating the repo</span></div><div style="clear:both;"></div>
<p>Log to your Docker Hub account.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker login</div><div class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don<span class="string">'t have a Docker ID, head over to https://hub.docker.com to create one.</span></div><div class="line">Username: YOUR_USERNAME</div><div class="line">Password: YOUR_PASSWORD</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">"Creating my first image"</span> ArchonWeb YOUR_USERNAME/archonweb</div></pre></td></tr></table></figure>
<p>To probe that all is ok let’s delete our container and all the images</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@Docker:~|⇒  docker rm ArchonWeb</div><div class="line">ArchonWeb</div><div class="line">root@Docker:~|⇒  docker images</div><div class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">YOUR_USERNAME/archonweb   latest              c739c75c3b8e        33 minutes ago      262.4 MB</div><div class="line">&lt;none&gt;                  &lt;none&gt;              ad6d1440ebde        40 minutes ago      262.4 MB</div><div class="line">debian                  latest              031143c1c662        3 days ago          125.1 MB</div><div class="line">root@Docker:~|⇒  docker rmi c739c75c3b8e ad6d1440ebde 031143c1c662</div><div class="line">Untagged: YOUR_USERNAME/archonweb:latest</div><div class="line">Untagged: YOUR_USERNAME/archonweb@sha256:8e1e908fe823ef1b746718ebb7564548f4f0ea076faaae733f667fb5946acee7</div><div class="line">Deleted: sha256:c739c75c3b8e690427a845ae79206b1e3037fddf604765dc5e0478536161e5bb</div><div class="line">Deleted: sha256:ad6d1440ebde55617462269619<span class="built_in">cd</span>457bfa825d8f307c126d7fbc0ca3201c493f</div><div class="line">Deleted: sha256:a6a314f5c1a5da3d06226fe40216731384d3f80fafade48a2b1cef3f07384b96</div><div class="line">Untagged: debian:latest</div><div class="line">Untagged: debian@sha256:2340a704d1f8f9ecb51c24d9cbce9f5ecd301b6b8ea1ca5eaba9edee46a2436d</div><div class="line">Deleted: sha256:031143c1c662878cf5be0099ff759dd219f907a22113eb60241251d29344bb96</div><div class="line">Deleted: sha256:9e63c5bce4585dd7038d830a1f1f4e44cb1a1515b00e620ac718e934b484c938</div></pre></td></tr></table></figure>
<p>Now we are going to create a new container with our own image and we will redirect the host port 8080 to our docker 80 port.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create  --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb</div><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure>
<p>Start the container, enter into it and start the Apache2 web server. Now go to your docker host with port 8080 and you’ll see the Apache default page.</p>
<div class="figure center" style="width:;"><a class="fancybox" href="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/apache2_default_page.png" title="Apache 2 Default Server" data-fancybox-group="travel" target="_blank" rel="external"><img class="fig-img" src="https://s3-eu-west-1.amazonaws.com/a-castellano.github.io/apache2_default_page.png" alt="Apache 2 Default Server"></a><span class="caption">Apache 2 Default Server</span></div><div style="clear:both;"></div>
<p>You can configue the container to launch apache2 when you start the container.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create --name ArchonWeb --hostname ArchonWeb -p 8080:80 -i YOUR_USERNAME/archonweb /usr/sbin/apache2ctl -D FOREGROUND</div><div class="line">docker start ArchonWeb</div></pre></td></tr></table></figure>
<p>If you followed all the intructions until here you have ArchonWeb running. Congratulations!</p>
<p>Probably you are having some questions and concerns such as “What happens if we put a private webpage in our container, will it be public if we commit our images? Where is the database for my webapps? No worries, this was a first example of how Docker works. In the following posts of this series I will address all these questions and more. For starters, in the next adventure I will talk about <strong>volumes</strong> and <strong>Docker Composer</strong> (for automatize your dockers deployment).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;In this post I talk about how to get started in Docker. First we will set a Docker server, afterwards we will create your first D
    
    </summary>
    
      <category term="global" scheme="https://a-castellano.github.io/categories/global/"/>
    
    
      <category term="docker" scheme="https://a-castellano.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>This is Major Tom to ground control</title>
    <link href="https://a-castellano.github.io/2016/08/23/This-is-Major-Tom-to-ground-control/"/>
    <id>https://a-castellano.github.io/2016/08/23/This-is-Major-Tom-to-ground-control/</id>
    <published>2016-08-23T21:57:34.000Z</published>
    <updated>2016-09-05T06:47:27.313Z</updated>
    
    <content type="html"><![CDATA[<p>Engines Ready! It is Time to liftoff!</p>
<p>Welcome to my blog. Here I will try to post interesting pieces of my own work such as sysadmin scripts, useful dev tools with examples, etc. I hope you will enjoy the lecture of my website while you learn new concepts.</p>
<p>First of all. How is this blog made?</p>
<p>I’m using <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> as blogging platfform. I found it few days ago and it seems really useful and easy to use. Following the <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> this blog was set in few minutes.</p>
<p>The feature I like the most is that you can mantain the blog in your local system (in my case I’m using an Ubuntu 16.04 VM) for writting posts. When the post is ready to be published you only have to “build” the blog and “deploy” it to your site repo. Hexo will generate a static website in the previously choosen repository (it’s all in the <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a>).</p>
<p>So, when I’ve finished this post, from my VM, I check that the post is OK rendering the blog in my brwoser.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>I can see the local version of my blog in <a href="http://MY_SERVER_IP:4000" target="_blank" rel="external">http://MY_SERVER_IP:4000</a> (by default it uses that port)</p>
<p>If everithing looks fine to me it’s time to build the static content and deploy it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>
<p>And that’s all! The new post it’s been published in my blog!</p>
<p>The Hexo blog is stored in my <a href="https://github.com/a-castellano/hexo_blog" target="_blank" rel="external">GitHub acccount</a> and the static webpage that you are watching is <a href="https://github.com/a-castellano/a-castellano.github.io" target="_blank" rel="external">there</a> too.</p>
<p>I’m not explaining how to set up an hexo blog, the <a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo documentation</a> is all you need for doing it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Engines Ready! It is Time to liftoff!&lt;/p&gt;
&lt;p&gt;Welcome to my blog. Here I will try to post interesting pieces of my own work such as sysadm
    
    </summary>
    
      <category term="global" scheme="https://a-castellano.github.io/categories/global/"/>
    
    
      <category term="hexo" scheme="https://a-castellano.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
